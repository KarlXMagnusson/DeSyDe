// *** GENERAL CONSTRAINTS ***

//choosing a mode for each proc
for(size_t j=0; j<platform->nodes(); j++){
  rel(*this, proc_mode[j] < platform->getModes(j));
  rel(*this, (nEntitiesOnProc[j]==0) >> (proc_mode[j] == 0));
}

//if two actors are in the same schedule (the same "next-chain"),
//then they must be on the same processor
//if the actors are in different schedules, then they must be on
//different processors
for(size_t ii=0; ii<apps->n_SDFActors(); ii++){
  for(size_t ij=0; ij<apps->n_SDFActors(); ij++){
    rel(*this, (next[ii]==ij || next[ij]==ii) >> (proc[ii]==proc[ij]));
    if(ii!=ij){
      rel(*this, ((next[ii]>=apps->n_programEntities())&&(next[ij]>=apps->n_programEntities())) >> (proc[ii]!=proc[ij]));
    }
  }
}

//count how many processors are used for the mapping
if(!mapping->homogeneousPlatform())
nvalues(*this, proc, IRT_EQ, procsUsed);
else
rel(*this, procsUsed == (max(proc)+1));//requires symmetry breaking
//through ordering

count(*this, proc.slice(0, 1, apps->n_SDFActors()), nSDFAsOnProc);
if(apps->n_IPTTasks()>0)
count(*this, proc.slice(apps->n_SDFActors()), nTasksOnProc);
count(*this, proc, nEntitiesOnProc);

//WCET of actors, depending on mapping
IntVarArgs wcet(*this, apps->n_programEntities(), 0, Int::Limits::max);
if(platform->isFixed()){ //then wcet only depends on choice of proc
  for(size_t ii=0; ii<apps->n_programEntities(); ii++){
    IntArgs wcets(mapping->getWCETsSingleMode(ii));
    if(wcets.size()==0)
    {
      cout << "WCET for app " << mapping->getAppName(ii) << " is not set\n";
    }
    element(*this, wcets, proc[ii], wcet[ii]);
  }
} else{
  for(size_t ii=0; ii<apps->n_programEntities(); ii++){
    IntVarArgs wcets_procs(*this, platform->nodes(), -1, Int::Limits::max);
    for(size_t j=0; j<platform->nodes(); j++){
      //cout << "reading WCETs\n";
//      cout << "WCETs for " << ii << " on proc " << j << ": ";
      IntArgs wcets_modes(mapping->getWCETs(ii, j));
//      for (auto& appl : wcets_modes) cout << appl << " ";
//      cout << endl;
      if(wcets_modes.size() == 0){
        cout << "WCET for app " << mapping->getAppName(ii) << " is not set\n";
      }
      element(*this, wcets_modes, proc_mode[j], wcets_procs[j]);
    }
    element(*this, wcets_procs, proc[ii], wcet[ii]);
  }
}

//memory consumption of actors for code, depending on mapping
IntVarArgs memConsCode(*this, apps->n_programEntities(), 0, Int::Limits::max);
for(size_t ii=0; ii<apps->n_programEntities(); ii++){
  IntArgs memConss(mapping->memConsCode(ii));
  element(*this, memConss, proc[ii], memConsCode[ii]);
}

//memory consumption of actors for (local) data, depending on mapping
IntVarArgs memConsData(*this, apps->n_programEntities(), 0, Int::Limits::max);
for(size_t ii=0; ii<apps->n_programEntities(); ii++){
  IntArgs memConss(mapping->memConsData(ii));
  element(*this, memConss, proc[ii], memConsData[ii]);
}

//processor utilization
for(size_t j=0; j<platform->nodes(); j++){
  rel(*this, (proc_period[j]>0 && nSDFAsOnProc[j]>0) >> (utilization[j] == ((proc_SDF_wcet_sum[j]*mapping->max_utilization)/proc_period[j])));
  rel(*this, (nEntitiesOnProc[j]==0) >> (utilization[j]==0));
  IntArgs proc_pows(platform->getPowerCons(j));
  cout << "proc_pows of proc " << j << ": ";
  for(size_t m=0; m<platform->getModes(j); m++){
    cout << proc_pows[m] << " ";
    rel(*this, ((proc_mode[j]==m) && (nSDFAsOnProc[j]>0) && ((proc_SDF_wcet_sum[j]*mapping->max_utilization)%proc_period[j]==0))
        >> (proc_power[j] == proc_pows[m]*utilization[j]));
    rel(*this, ((proc_mode[j]==m) && (nSDFAsOnProc[j]>0) && ((proc_SDF_wcet_sum[j]*mapping->max_utilization)%proc_period[j]>0))
        >> (proc_power[j] == proc_pows[m]*(utilization[j]+1)));
  }
  cout << endl;
  rel(*this, (nEntitiesOnProc[j]==0) >> (proc_power[j]==0));
  IntArgs areas(platform->getAreaCost(j));
  element(*this, areas, proc_mode[j], proc_area[j]);
  IntArgs costs(platform->getMonetaryCost(j));
  element(*this, costs, proc_mode[j], proc_cost[j]);
}
rel(*this, sys_utilization == (sum(utilization)/platform->nodes()));
rel(*this, procsUsed_utilization == (sum(utilization)/procsUsed));
rel(*this, sys_power == sum(proc_power));
rel(*this, sys_area == sum(proc_area));
rel(*this, sys_cost == sum(proc_cost));

//symmetry breaking:
//if the platform (or a pair of nodes) is homogeneous, then first-scheduled actors on each proc
//shall be ordered according to their index
if(mapping->homogeneousPlatform()){
  for(size_t ji=0; ji<platform->nodes(); ji++){
    for(size_t jj=ji+1; jj<platform->nodes()-1; jj++){
      if(ji!=platform->nodes()-2){
        //cout << apps->n_programEntities()+jj << " > " << apps->n_programEntities()+ji << endl;
        rel(*this, next[apps->n_SDFActors()+jj] > next[apps->n_SDFActors()+ji]);
      }
    }
  }
  for(size_t ji=0; ji<platform->nodes()-1; ji++){
    //cout <<apps->n_programEntities()+ji<< " > " << apps->n_programEntities()+platform->nodes()-1 << endl;
    rel(*this, next[apps->n_SDFActors()+ji] > next[apps->n_SDFActors()+platform->nodes()-1]);
  }
} else{
  for(size_t ji=0; ji<platform->nodes(); ji++){
    for(size_t jj=ji+1; jj<platform->nodes()-1; jj++){
      if((mapping->homogeneousModeNodes(ji, jj)) &&
          (ji!=platform->nodes()-2)){
        int first = (ji==0) ? apps->n_SDFActors()+platform->nodes()-1 : apps->n_SDFActors()+ji-1;
        int second = apps->n_SDFActors()+jj-1;
        //cout << apps->n_programEntities()+jj << " > " << apps->n_programEntities()+ji << endl;
        rel(*this, (proc_mode[ji] == proc_mode[jj]) >> (next[second] > next[first]));
      }
    }
    for(size_t jj=ji+1; jj<platform->nodes(); jj++){
      if(mapping->homogeneousModeNodes(ji, jj)){
        rel(*this, !(nEntitiesOnProc[ji]==0 && nEntitiesOnProc[jj]>0));
      }
    }
  }
  /*for(size_t ji=0; ji<platform->nodes()-1; ji++){
   int jj = platform->nodes()-1;
   if(mapping->homogeneousModeNodes(ji, jj))
   rel(*this, (proc_mode[ji] == proc_mode[jj]) >>
   (next[apps->n_SDFActors()+ji] > next[apps->n_SDFActors()+jj]));
   } */
}

//SDFGs and IPTs are not allowed to share processors
for(size_t i=0; i<apps->n_SDFActors(); i++){ //i iterates of SDF actors
  for(size_t j=apps->n_SDFActors(); j<apps->n_IPTTasks()+apps->n_SDFActors(); j++){ //j iterates over IPTs
    rel(*this, proc[i] != proc[j]);
    //cout << "proc["<<i<<"] != proc["<<j<<"])" << endl;
  }
}

// *** CONSTRAINTS FORCING THE DESIGN DECISIONS ***
//if the design decisions dictate it, map all instances of the same actor onto the same processor
/*  if(dc->isMapSDF()){
 for(size_t ii=0; ii<apps->n_SDFActors(); ii++){
 for(size_t ij=ii+1; ij<apps->n_SDFActors(); ij++){
 if(apps->getParentActor(ii) == apps->getParentActor(ij)){
 rel(*this, proc[ii]==proc[ij]);
 }
 }
 }
 }
 */

//TODO: further design decisions
vector<div_t> firstMapping = mapping->getFirstMapping();
for(unsigned int x=0; x<firstMapping.size(); x++){
  for(size_t i=0; i<apps->n_programEntities(); i++){
    if(x == apps->getSDFGraph(i)){
      cout << "proc[" << i << "] >= " << firstMapping[x].quot << " & <= " << firstMapping[x].rem << endl;
      rel(*this, proc[i]>=firstMapping[x].quot && proc[i]<=firstMapping[x].rem);
    }
  }
}

if(firstMapping.size()>0){
  //cout << "procsUsed >= " << (firstMapping.back().quot+1) << endl;
  rel(*this, procsUsed >= (firstMapping.back().quot+1));
}

