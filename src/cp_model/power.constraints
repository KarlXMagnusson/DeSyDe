
//enforcing the design constraints:
if(mapping->getSystemConstraints().power > 0){
  rel(*this, sys_power <= mapping->getSystemConstraints().power);
}

IntVarArgs staticPow_usedProcs(*this, platform->nodes(), 0, Int::Limits::max);
IntVarArgs staticPow_allProcs(*this, platform->nodes(), 0, Int::Limits::max);
//power model for the processors
for(size_t j=0; j<platform->nodes(); j++){
  element(*this, IntArgs(platform->getStatPowerCons(j)), proc_mode[j], staticPow_allProcs[j]);
  
  rel(*this, (nEntitiesOnProc[j]==0) >> (staticPow_usedProcs[j]==0));
  rel(*this, (nEntitiesOnProc[j]>0) >> (staticPow_usedProcs[j]==staticPow_allProcs[j]));
  rel(*this, (nEntitiesOnProc[j]==0) >> (proc_powerDyn[j]==0));

  IntVar dynPower_proc(*this, 0, Int::Limits::max);
  element(*this, IntArgs(platform->getDynPowerCons(j)), proc_mode[j], dynPower_proc);
  //for(size_t m=0; m<platform->getModes(j); m++){
  /*rel(*this, ((nSDFAsOnProc[j]>0) && ((proc_SDF_wcet_sum[j]*mapping->max_utilization)%proc_period[j]==0))
      >> (proc_powerDyn[j] == dynPower_proc*utilization[j]));
  rel(*this, ((nSDFAsOnProc[j]>0) && ((proc_SDF_wcet_sum[j]*mapping->max_utilization)%proc_period[j]>0))
      >> (proc_powerDyn[j] == dynPower_proc*(utilization[j]+1)));*/
  rel(*this, ((nSDFAsOnProc[j]>0))// && ((proc_SDF_wcet_sum[j]*mapping->max_utilization)%proc_period[j]==0))
      >> (proc_powerDyn[j] == dynPower_proc*utilization[j]));
  //}
}
rel(*this, sys_power == sum(proc_powerDyn)+sum(staticPow_allProcs)+noc_power);
rel(*this, sysUsed_power == sum(proc_powerDyn)+sum(staticPow_usedProcs)+nocUsed_power);

//power model for the NoC
if(platform->getInterconnectType() == TDN_NOC){
  Matrix<IntVarArgs> flitsPerLinkM(flitsPerLink, links, messages);//derive flits per switch and flits per NI from this
  
  IntVarArgs linkNrg(*this, apps->n_SDFApps(), 0, Int::Limits::max);
  IntVarArgs switchNrg(*this, apps->n_SDFApps(), 0, Int::Limits::max);
  IntVarArgs niNrg(*this, apps->n_SDFApps(), 0, Int::Limits::max);
  IntVarArgs dynPower_noc(*this, apps->n_SDFApps(), 0, Int::Limits::max);
  IntVar dynPower_link(*this, 0, Int::Limits::max);
  IntVar dynPower_switch(*this, 0, Int::Limits::max);
  IntVar dynPower_NI(*this, 0, Int::Limits::max);
  IntVar statPower_noc(*this, 0, Int::Limits::max);
  IntVarArgs statPower_linkAtNode(*this, platform->nodes(), 0, Int::Limits::max);
  IntVar statPower_link(*this, 0, Int::Limits::max);
  IntVar statPower_switch(*this, 0, Int::Limits::max);
  IntVar statPower_NI(*this, 0, Int::Limits::max);
  IntVarArgs statPower_NIs(*this, platform->nodes(), 0, Int::Limits::max);
  IntVarArgs statPower_switches(*this, platform->nodes(), 0, Int::Limits::max);
  IntVarArgs statPower_links(*this, links-2*platform->nodes(), 0, Int::Limits::max);
  
  
  //effects of chosen NoC mode:
  element(*this, IntArgs(platform->getDynPowerCons_link()), ic_mode, dynPower_link);
  element(*this, IntArgs(platform->getDynPowerCons_switch()), ic_mode, dynPower_switch);
  element(*this, IntArgs(platform->getDynPowerCons_NI()), ic_mode, dynPower_NI);
  element(*this, IntArgs(platform->getStaticPowerCons()), ic_mode, statPower_noc);
  for(int p=0; p<platform->nodes(); p++){
    element(*this, IntArgs(platform->getStaticPowerCons_link(p)), ic_mode, statPower_linkAtNode[p]);
  }
  element(*this, IntArgs(platform->getStaticPowerCons_link()), ic_mode, statPower_link);
  element(*this, IntArgs(platform->getStaticPowerCons_switch()), ic_mode, statPower_switch);
  element(*this, IntArgs(platform->getStaticPowerCons_NI()), ic_mode, statPower_NI);
  
  
  int min_ch = 0;
  for(size_t a=0; a<apps->n_SDFApps(); a++){
    rel(*this, linkNrg[a] == (sum(flitsPerLinkM.slice(0, links, min_ch, apps->getMaxChannelId(a)+1)) * dynPower_link * cycleLength));
    rel(*this, switchNrg[a] == (sum(flitsPerLinkM.slice(0, links-platform->nodes(), min_ch, apps->getMaxChannelId(a)+1)) 
                                * dynPower_switch * cycleLength));
    rel(*this, niNrg[a] == ((sum(flitsPerLinkM.slice(0, platform->nodes(), min_ch, apps->getMaxChannelId(a)+1)) 
                             + sum(flitsPerLinkM.slice(links-platform->nodes(), links, min_ch, apps->getMaxChannelId(a)+1)))
                                * dynPower_NI * cycleLength));
    min_ch = apps->getMaxChannelId(a)+1;
    
    //TODO put the scaling factor (mapping->max_utilization) into settings (= length of fractional part for power values: [1=none, 10=one,...])
    /*rel(*this, (((linkNrg[a]+switchNrg[a]+niNrg[a])*mapping->max_utilization)%period[a]==0) 
                >> (dynPower_noc[a] == (((linkNrg[a]+switchNrg[a]+niNrg[a])*mapping->max_utilization)/period[a])));
    rel(*this, (((linkNrg[a]+switchNrg[a]+niNrg[a])*mapping->max_utilization)%period[a]>0) 
                >> (dynPower_noc[a] == (((linkNrg[a]+switchNrg[a]+niNrg[a])*mapping->max_utilization)/period[a])+1));*/ //"ceiling"
                
                
    rel(*this, (dynPower_noc[a] == (((linkNrg[a]+switchNrg[a]+niNrg[a])*mapping->max_utilization)/period[a])));
  }
  rel(*this, noc_power == sum(dynPower_noc)+statPower_noc);
  rel(*this, nocUsed_power == sum(dynPower_noc)+sum(statPower_NIs)+sum(statPower_switches)); //"active" links included in switches & NIs
  
  for(size_t j=0; j<platform->nodes(); j++){
    rel(*this, (nEntitiesOnProc[j]>0) >> (statPower_NIs[j]==(statPower_NI+2*statPower_link)));
    rel(*this, (nEntitiesOnProc[j]==0) >> (statPower_NIs[j]==0));
    
    vector<neighborNode> neighbors = platform->getNeighborNodes(j);
    IntVarArgs activeLinks(*this, neighbors.size(), 0, 1);
    IntVarArgs activeNeighbors(*this, neighbors.size(), 0, 1);
    for(int n=0; n<neighbors.size(); n++){
      rel(*this, ((max(flitsPerLinkM.col(neighbors[n].link_to))==0)
                   && (max(flitsPerLinkM.col(neighbors[n].link_from))==0)) >> (activeLinks[n]==0));
      rel(*this, ((max(flitsPerLinkM.col(neighbors[n].link_to))>0)
                   || (max(flitsPerLinkM.col(neighbors[n].link_from))>0)) >> (activeLinks[n]==1));
      rel(*this, (statPower_switches[neighbors[n].node_id]==0) >> (activeNeighbors[n]==0));
      rel(*this, (statPower_switches[neighbors[n].node_id]>0) >> (activeNeighbors[n]==1));
    }
    rel(*this, (max(activeLinks)==0) >> (statPower_switches[j]==0));
    rel(*this, (max(activeLinks)>0) >> (statPower_switches[j]==statPower_switch + sum(activeNeighbors)*statPower_link));
  }
}else if(platform->getInterconnectType() == TDMA_BUS){//TODO add a power model for the bus
  rel(*this, noc_power == 0);
  rel(*this, nocUsed_power == 0);
}
